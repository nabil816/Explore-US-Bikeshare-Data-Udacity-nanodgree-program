import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.
    city_user
    
    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
            city = input("Write a city name").lower()
            if city in CITY_DATA: break
            if city not in CITY_DATA:
                 print("\nInvalid answer\n")
        
    # TO DO: get user input for month (all, january, february, ... , june)
    
    month_filter = input("do you want to use filter by month.\n if no, write no\n !.if yes,write yes").lower()
    if month_filter == 'yes':
        month = input("write the month").lower()
        if month in ['january', 'february', 'march', 'april', 'may', 'june']:
            print('You have selected {}'.format(month))
        else:
            month = input('Kindly select month between January and June')
    elif month_filter == 'no':
         month = 'all'
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
     
    day_filter = input("do you want to use filter by day.\n if no, write no\n !.if yes,write yes").lower()
    if day_filter == 'yes':
        day = input("inter the day of week").lower()
    elif day_filter == 'no':
        day = 'all'
    print('you will filtering by',city, month, day)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name

    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1

        # filter by month to create the new dataframe
        df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    common_month = df['month'].mode()[0]
     # TO DO: display the most common day of week
    common_day_of_week = df['day_of_week'].mode()[0]
 
    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    common_hour = df['hour'].mode()[0]
    while True:
        ask = input("do you want to see popular times and tarvel,if yes,write yes,if no write no").lower()
        if ask == 'yes' :
            askagain =  input("do you want to see raw data of popular times and tarvel,if yes,write yes,if no write no").lower()
            if askagain == 'yes':
                mydict = [{'the common month': common_month, 'common day of week': common_day_of_week, 'common hour': common_hour}]
                datavis = pd.DataFrame(mydict)
                print(datavis.iloc[[0]])
                break
            if askagain == 'yes':                
                break                           
        elif ask == 'no':
            break
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()
     
    # TO DO: display most commonly used start station
    popular_start_station = df['Start Station'].mode()[0]
     # TO DO: display most commonly used end station
    popular_End_station = df['End Station'].mode()[0]
     # TO DO: display most frequent combination of start station and end station trip
    df['combination'] = df['Start Station']+ ' to ' + df['End Station']
    common_combination_of_start_and_end = df['combination'].mode()[0]
    while True:
        ask = input("do you want to see The Most Popular Stations and Trip,if yes,write yes,if no write no").lower()
        if ask == 'yes' :            
            askagain =  input("do you want to see raw data of Popular Stations and Trip,if yes,write yes,if no write no").lower()
            if askagain == 'yes':
                mydict = [{'common start station:': popular_start_station,'common End station:': popular_End_station,'common combination of start and end:': common_combination_of_start_and_end}]
                datavis = pd.DataFrame(mydict)
                print(datavis.iloc[0])
                break 
            if askagain == 'yes':                
                break                           
        elif ask == 'no':
            break

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    # TO DO: display total travel time
    total_travel_time = df['Trip Duration'].sum()
      # TO DO: display mean travel time
    mean_travel_time = df['Trip Duration'].mean()
    while True:
        ask = input("do you want to see trip duration,if yes,write yes,if no write no").lower()
        if ask == 'yes' :
            askagain =  input("do you want to see raw data of trip duration,if yes,write yes,if no write no").lower()
            if askagain == 'yes':
                mydict = [{'total travel time': total_travel_time, 'mean travel time':mean_travel_time}]
                datavis = pd.DataFrame(mydict)
                print(datavis.iloc[[0]])
                break
            if askagain == 'yes':                
                break           
        elif ask == 'no':
            break
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    counts_of_user_types = df['User Type'].value_counts()
    while True:           
        ask = input("do you want to see user information,if yes,write yes,if no write no").lower()
        if ask == 'yes' :  
            
            break  
    while True:                
        askagain =  input("do you want to see raw data of user information,if yes,write yes,if no write no").lower()
        if askagain == 'yes':            
            try:                
                counts_of_user_gender = df['Gender'].value_counts()
     # TO DO: Display earliest, most recent, and most common year of birth
                earlist_year_of_birth = df['Birth Year'].min()
                most_recent_year_of_birth = df['Birth Year'].max()
                most_common_year_of_birth = df['Birth Year'].mode()[0]
                mydict = [{'counts of user types:': counts_of_user_types,
                   'counts of user_gender:':counts_of_user_gender,
                   'earlist year of birth:':earlist_year_of_birth,
                   'most recent year of birth:':most_recent_year_of_birth,
                   'most common year of birth:':most_common_year_of_birth}]
                datavis = pd.DataFrame(mydict)
                print(datavis.iloc[0])
                break
            except KeyError:               
                print('Washington dataset does not contain the gender and birth year column') 
                mydict = [{'counts of user types': counts_of_user_types}]
                datavis = pd.DataFrame(mydict)
                print(datavis.iloc[0])
                break
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)       
def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
